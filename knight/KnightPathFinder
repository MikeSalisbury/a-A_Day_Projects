require "./PolyTree.rb"

class KnightPathFinder

  def initialize(starting_pos)
    @starting_pos = starting_pos
    @visited_positions = [starting_pos]
  end

  def valid_moves(pos)
    x, y = pos
    possible_moves = [[x+2,y+1],[x+2,y-1],[x-2,y+1],[x-2,y-1],[x+1,y+2],[x+1,y-2],[x-1,y+2],[x-1,y-2]]
    possible_moves.reject do |move|
      x, y = move
      x < 0 || x >7 || y <0 || y > 7
    end

  end

  def new_move_positions(pos)
    valid_pos = valid_moves(pos).reject do |move|
      @visited_positions.include?(move)
    end
    @visited_positions += valid_pos
    valid_pos
  end

  def build_move_tree(pos)
    moves = new_move_positions(pos)
    queue = [PolyTree.new(pos)]


    until queue.empty?
      node = queue.shift
      return node if node.value == [8,8]  #CHANGE LATER
      moves.each do |move|
        node.add_child(PolyTree.new(move))
      end
      queue += node.children
    end

  end

  def trace_path_back(node)
    path = []
    while node.parent
      path << node.value
      node = node.parent
    end
      path
  end
end
